*** notes on 10/7/2016
I am integrating the circuit analyzer to the current tangible code
1. I added a temp button; when the button is clicked the code configures the visible components and the connections
and then runs the circuit analyzer and outputs the JSON object (for now, just prints it; later, will send it to parse)

Component --> Component:
start (controlpoint) --> leftJoint (connector)
end   (controlpoint) --> rightJoint (connector)

ControlPoint --> Connector:
myComponent (component) --> parent (component)
connections  (List<ControlPoint>) --> attached (List<Connector>)

*** notes on 10/11/2016
Integrating the circuit analyzer to the tangible code:
1. First, changing the name of variables in the circuit code.
	start --> leftJoint
	end   --> rightJoint
	mycomponent --> parent
	connections --> attached
	controlPoint --> Connector
2. commented the code that deals with short circuit and burnt batteries!
3. commented the "ping" sound
4. modify "c is" and "c as" for Battery and Bulb objects in the tabletop version to checking the type of component instead
	as we don't have different objects for different types of components in the tangible version.
	--> actually, I commented the code for "bulb" as it was for determining if the bulb is on or off, which
		does not apply to the tangible version :)
5. removed the code for calculating the offset x and y based on marker's position
NOTE: I need to figure out coordinations for this new code.
6. modified the "createConnectionArray" function to read circuit.components instead of theApp.components
7. Added the sendData.js
	
8. I need to modify 4 functions that reflect changes from touch to graph representation in the tabletop version:
	a. addNewBranch
	b. collapseNode
	
	c. removeBranch --> not being used
	d. splitNode --> not being used
	
9. fixed an error: Uncaught TypeError: Cannot read property 'each' of undefined [sendData.js:46]
	--> I added the underscore.js library! It seemed to solve the issue.
	
*** notes on 10/17/2016
1. fixed the code to include connections with more than two connectors

2. fixed the issue with end points of connected connectors not overlapping:
	--> this causes issue in the electron model code, as it should represent all the connected connectors as one single node,
		otherwise it does not work correctly.
		
*** notes on 10/19/2016
1. adjusted the connector positions (1.5 distance --> 1 and radius 2 --> 1.5) in component.dart code, "set connect positions" part of code

2. calibrating the position of components                                                                                                                    	